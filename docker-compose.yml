
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  # 1. Crypto Market Data Producer
  crypto-producer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-producer
    hostname: crypto-producer
    command: python ingest/producer.py
    depends_on:
      - kafka
    ports:
      - "9101:9101"

  # 2. Crypto Market Data Consumer to DB
  crypto-consumer-db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-consumer-db
    hostname: crypto-consumer-db
    command: python ingest/consumer_to_db.py
    depends_on:
      - kafka
      - postgres
    ports:
      - "9102:9102"

  # 3. News Ingest
  news-ingest:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: news-ingest
    hostname: news-ingest
    command: python sentiment/news_ingest.py
    depends_on:
      - kafka
    ports:
      - "9103:9103"

  # 4. Sentiment Scorer
  sentiment-scorer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentiment-scorer
    hostname: sentiment-scorer
    command: python sentiment/score_and_join_async.py
    depends_on:
      - kafka
    ports:
      - "9104:9104"

  # 5. Sentiment Consumer to DB
  sentiment-db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentiment-db
    hostname: sentiment-db
    command: python sentiment/sentiment_to_db.py
    depends_on:
      - kafka
      - postgres
    ports:
      - "9105:9105"

  # 6. On-chain Ingest
  onchain-ingest:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: onchain-ingest
    hostname: onchain-ingest
    command: python onchain/ingest_onchain.py
    depends_on:
      - kafka
    ports:
      - "9106:9106"

  # 7. On-chain Parser/Enrichment
  onchain-parser:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: onchain-parser
    hostname: onchain-parser
    command: python onchain/parse.py
    depends_on:
      - kafka
    ports:
      - "9107:9107"

  # 8. On-chain Consumer to DB
  onchain-consumer-db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: onchain-consumer-db
    hostname: onchain-consumer-db
    command: python onchain/onchain_consumer_to_db.py
    depends_on:
      - kafka
      - postgres
    ports:
      - "9108:9108"

  # 9. Anomaly Detector
  anomaly-detector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: anomaly-detector
    hostname: anomaly-detector
    command: python onchain/anomaly_detector.py
    depends_on:
      - postgres
    ports:
      - "9109:9109"

  # 10. FastAPI Service
  fast-api-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fast-api-service
    hostname: fast-api-service
    command: python fastAPI/fast_api.py
    depends_on:
      - postgres
    ports:
      - "8000:8000"
      - "9110:9110"

  # 11. Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - crypto-producer
      - crypto-consumer-db
      - news-ingest
      - sentiment-scorer
      - sentiment-db
      - onchain-ingest
      - onchain-parser
      - onchain-consumer-db
      - anomaly-detector
      - fast-api-service

  # 12. Grafana
  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana-crypto
    hostname: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./provisioning/datasource:/etc/grafana/provisioning/datasource
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: