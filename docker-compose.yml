services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9101:9101" # Only Kafka's own JMX metrics port should be exposed, if needed
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1

  # 1. PostgreSQL Database
  postgres:
    image: postgres:15.3-alpine
    container_name: postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  # 2. Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus2
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - kafka
      - producer
      - consumer

  # 3. Grafana
  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana-crypto
    hostname: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./provisioning/datasource:/etc/grafana/provisioning/datasource
    depends_on:
      - prometheus
      - producer
      - consumer

  producer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: producer
    hostname: producer
    environment:
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      - kafka

  consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: consumer
    hostname: consumer
    environment:
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      - kafka
      - postgres

  news-ingest:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: news-ingest
    hostname: news-ingest
    environment:
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      - kafka

  sentiment-scorer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentiment-scorer
    hostname: sentiment-scorer
    environment:
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      - kafka

  sentiment-to-db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentiment-to-db
    hostname: sentiment-to-db
    environment:
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      - kafka
      - postgres

  ingest-onchain:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ingest-onchain
    hostname: ingest-onchain
    environment:
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      - kafka
  
  onchain-consumer-to-db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: onchain-consumer-to-db
    hostname: onchain-consumer-to-db
    environment:
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      - kafka
      - postgres

  anomaly-detector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: anomaly-detector
    hostname: anomaly-detector
    environment:
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      - kafka
      - postgres

  # This is the new service to run your Prefect flow
  prefect-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: prefect-agent
    hostname: prefect-agent
    command: >
      /bin/sh -c "prefect flow-run create --name 'crypto-data-pipeline-flow' --param 'my-param=value'"
    volumes:
      - .:/app
    depends_on:
      - kafka
      - postgres
      - producer
      - consumer
      - news-ingest
      - sentiment-scorer
      - sentiment-to-db
      - ingest-onchain
      - onchain-consumer-to-db
      - anomaly-detector
    restart: always

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
